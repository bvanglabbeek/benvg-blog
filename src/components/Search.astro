---
---

<div id="search-container" style="margin-top: 1rem; position: relative; max-width: 500px; margin-inline: auto;">
  <input
    id="search-input"
    type="text"
    placeholder="Search..."
    style="padding: 0.5rem; width: 100%; border-radius: 6px; border: 1px solid #ccc;"
  />
  <ul id="search-results" class="search-list"></ul>
</div>

<script type="module" is:inline>
  import Fuse from 'https://cdn.skypack.dev/fuse.js';

  let fuse;
  let index = [];
  let activeIndex = -1;
  let debounceTimer;

  fetch('/search-index.json')
    .then(res => res.json())
    .then(data => {
      index = data;
      fuse = new Fuse(data, {
        keys: ['title', 'description', 'tags'],
        includeMatches: true,
        threshold: 0.3,
      });
    });

  const input = document.getElementById('search-input');
  const resultsList = document.getElementById('search-results');

  function highlight(text, indices = []) {
    if (!indices.length) return text;
    let result = '';
    let last = 0;

    for (const [start, end] of indices) {
      result += text.slice(last, start);
      result += `<span class="highlight">${text.slice(start, end + 1)}</span>`;
      last = end + 1;
    }

    result += text.slice(last);
    return result;
  }

  function updateResults(query) {
    resultsList.innerHTML = '';
    activeIndex = -1;

    if (!query || !fuse) {
      resultsList.style.display = 'none';
      return;
    }

    const results = fuse.search(query).slice(0, 5);
    resultsList.style.display = results.length ? 'block' : 'none';

    results.forEach(({ item, matches }, index) => {
      const titleMatch = matches.find(m => m.key === 'title');
      const descMatch = matches.find(m => m.key === 'description');

      const title = highlight(item.title, titleMatch?.indices || []);
      let description = highlight(item.description, descMatch?.indices || []);
      if (description.length > 200) {
        description = description.substring(0, 200) + '...';
      }

      const li = document.createElement('li');
      li.className = 'search-item';
      li.dataset.index = index;
      li.innerHTML = `
        <a href="/blog/${item.slug}" class="search-link">
          <div class="search-title">${title}</div>
          <div class="search-desc">${description}</div>
        </a>
      `;
      resultsList.appendChild(li);
    });
  }

  input?.addEventListener('input', () => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => {
      updateResults(input.value.trim());
    }, 300);
  });

  input?.addEventListener('keydown', (e) => {
    const items = resultsList.querySelectorAll('.search-item');
    if (!items.length) return;

    if (e.key === 'ArrowDown') {
      activeIndex = (activeIndex + 1) % items.length;
    } else if (e.key === 'ArrowUp') {
      activeIndex = (activeIndex - 1 + items.length) % items.length;
    } else if (e.key === 'Enter' && activeIndex >= 0) {
      const link = items[activeIndex].querySelector('a');
      if (link) link.click();
    }

    items.forEach((el, i) => {
      el.classList.toggle('active', i === activeIndex);
    });
  });
</script>

<style>
  .search-list {
    display: none;
    list-style: none;
    padding: 0;
    margin-top: 0.5rem;
    width: 100%;
    background: white;
    border-radius: 6px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 10;
  }

  .search-item {
    padding: 0;
    margin: 0;
  }

  .search-link {
    display: block;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: inherit;
    text-align: left;
    border-bottom: 1px solid #eee;
  }

  .search-item.active .search-link,
  .search-link:hover {
    background-color: #f3f4f6;
  }

  .search-title {
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
    color: #111;
  }

  .search-desc {
    font-size: 0.9rem;
    color: #444;
    line-height: 1.4;
  }

  .highlight {
    background-color: #fef9c3;
    color: #10b981;
    font-weight: 700;
    padding: 0 2px;
    border-radius: 2px;
  }

  @media (prefers-color-scheme: dark) {
    .search-list {
      background: #2d2f31;
    }

    .search-link {
      color: #eee;
      border-bottom: 1px solid #444;
    }

    .search-title {
      color: white;
    }

    .search-desc {
      color: #bbb;
    }

    .search-item.active .search-link,
    .search-link:hover {
      background-color: #3a3a3a;
    }

    .highlight {
      background-color: #166534;
      color: #34d399;
    }
  }
</style>
