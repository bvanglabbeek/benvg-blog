---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Generate all tag paths
export async function getStaticPaths() {
  const posts = await getCollection('blog');

  const tags = new Set();
  for (const post of posts) {
    (post.data.tags || []).forEach(tag => {
      tags.add(tag.toLowerCase().replace(/\s+/g, '-'));
    });
  }

  return Array.from(tags).map(tag => ({
    params: { tag }
  }));
}

// Get current tag from URL
const { tag } = Astro.params;
const posts = await getCollection('blog');

// Utility to normalize and match tag slugs
function toSlug(str) {
  return str.toLowerCase().replace(/\s+/g, '-');
}

// Filter posts by this tag
const filteredPosts = posts.filter(post =>
  (post.data.tags || []).some(t => toSlug(t) === tag)
);

const readableTag = tag.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());


// Sidebar: recent posts
const recentPosts = posts
  .filter(p => !p.data.tags?.includes('Appalachian Trail')) // optional: match index logic
  .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime())
  .slice(0, 5)
  .map(p => ({ title: p.data.title, slug: p.slug }));

// Sidebar: tag counts
const tagCount = {};
posts.forEach(post => {
  (post.data.tags || []).forEach(tag => {
    tagCount[tag] = (tagCount[tag] || 0) + 1;
  });
});
const categories = Object.entries(tagCount).map(([name, count]) => ({ name, count }));


---

<Layout title={`Posts tagged: ${readableTag}`}>
  <div style="display: grid; grid-template-columns: 3fr 1fr; gap: 3rem; margin-top: 2rem;">
    <!-- Main content -->
    <section>
      <h1>{readableTag}</h1>

      {filteredPosts.length === 0 ? (
        <p>No posts found in this category.</p>
      ) : (
        <ul style="display: flex; flex-direction: column; gap: 2rem; padding: 0;">
          {filteredPosts.map(post => (
            <li style="list-style: none;">
              <a href={`/blog/${post.slug}`} style="text-decoration: none; color: inherit;">
                <article style="
                  background: white;
                  border: 1px solid #eee;
                  border-radius: 12px;
                  box-shadow: 0 4px 10px rgba(0,0,0,0.05);
                  overflow: hidden;
                ">
                  {post.data.image && (
                    <img src={post.data.image} alt={post.data.title} style="width: 100%; height: auto;" />
                  )}
                  <div style="padding: 1.5rem;">
                    <h2>{post.data.title}</h2>
                    <p>{post.data.description}</p>
                    <a href={`/blog/${post.slug}`} style="
                      display: inline-block;
                      margin-top: 1rem;
                      background: #10b981;
                      color: white;
                      padding: 0.5rem 1rem;
                      border-radius: 6px;
                      font-weight: 600;
                      font-size: 0.9rem;
                    ">Read More</a>
                  </div>
                </article>
              </a>
            </li>
          ))}
        </ul>
      )}
    </section>

    <!-- Sidebar -->
    <aside>
      <section style="margin-bottom: 2rem;">
        <h3 style="font-size: 1.2rem;">Recent Posts</h3>
        <ul style="list-style: none; padding: 0; font-size: 0.95rem;">
          {recentPosts.map(post => (
            <li style="margin-bottom: 0.5rem;">
              <a href={`/blog/${post.slug}`} style="color: #333;">{post.title}</a>
            </li>
          ))}
        </ul>
      </section>

      <section>
        <h3 style="font-size: 1.2rem;">Categories</h3>
        <ul style="list-style: none; padding: 0; font-size: 0.95rem;">
          {categories.map(cat => (
            <li style="margin-bottom: 0.5rem;">
              <a href={`/category/${cat.name.toLowerCase().replace(/\s/g, '-')}`} style="color: #333;">
                {cat.name} ({cat.count})
              </a>
            </li>
          ))}
        </ul>
      </section>
    </aside>
  </div>
</Layout>

